:PROPERTIES:
:ID:       bf898853-3080-45c8-a290-4461e1d463b5
:END:
#+title: Nix Flakes
#+filetags: :nix:

/Flakes are an experimental feature of [[id:969658ed-3fd5-488d-b9c5-24cbaf37b6ee][Nix]] and depend on [[id:ffce2179-2f28-4f1c-ac7a-2ab3f99907b9][nix-command]]./

+ A =flake= is a directory or repository containing a =flake.nix= file at the
  toplevel.
+ A =subflake= is a subdirectory of a flake containing a =flake.nix= file.

* Purpose

With (flakeless) [[id:0b96c3ed-3db0-45e6-9ffc-b493c19228d3][Nix Expression Language]], dependency management is /hard/.
Consumers have to evaluate libraries directly and inject dependencies. For
dependencies which are relatively static (e.g. [[id:a77618ab-7a2e-4208-986a-c9b2ae580c3a][nixpkgs]]' lib), this isn't so bad;
but, for anything that requires attention to versioning this becomes a problem.

The lack of dependency management systems stifles reproducibility,
composability, and usability for libraries which can depend on different
versions of one another. Some attempts have been made to resolve the issue (niv)
but these have been superceded by flakes, which is a [[id:969658ed-3fd5-488d-b9c5-24cbaf37b6ee][Nix]] native solution.

* Schema

A =flake.nix= file is written in [[id:0b96c3ed-3db0-45e6-9ffc-b493c19228d3][Nix Expression Language]] and follows a set
schema. It is an attribute set with three (optional) toplevel attributes:
=description=, =inputs=, and =outputs=.

+ =description= is a string which provides a summary of the flake's contents or
  purpose.
+ =inputs= is an attribute set which declares the flake's dependencies.
+ =outputs= is an attribute set which exposes artifacts for consumption.

** Inputs

#+begin_src nix
{
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs";
    example = {
      url = "github:owner/repo/v1.0.0"; # This is the github URL type, there are others: https://nixos.org/manual/nix/stable/command-ref/new-cli/nix3-flake.html#types
      flake = true; # Set this to false if the input is not a flake. Defaults to true.
      # The `follows` keyword causes dependencies to be inherited.
      # In this case `inputs.nixpkgs` of `example` is overridden
      # to be consistent with the current flake.
      # NOTE: This could mean semantic changes, causing packages provided by `example`
      # not to be substituted by a binary cache.
      inputs.nixpkgs.follows = "nixpkgs";
    };
    # Alternative, though the former is more convenient and idiomatic
    example1 = {
      type = "github";
      owner = "owner";
      repo = "repo";
      ref = "v1.0.0";
      flake = true;
      inputs.nixpkgs.follows = "nixpkgs";
    }
  };
}
#+end_src

** Outputs

While =outputs= technically follows a schema, it's actually arbitrary and the
output schema is merely a suggestion. The output schema is defined by the
attributes that [[id:969658ed-3fd5-488d-b9c5-24cbaf37b6ee][Nix]] commands will recognize up front but any other attributes
are still exposed and are still consumable.

#+begin_src nix
{
  outputs = {...}: {
    # `nix run` will run these.
    apps."<system>" = {
      default = derivation;
      "<name>" = derivation;
    };
    # `nix build` will build these and if there is no apps attribute,
    # `nix run` will build these and attempt to execute a binary
    # from the result by the name `pname`.
    packages."<system>" = rec {
      default = derivation;
      "<name>" = derivation;
    };
    # This attribute was made for use by nixpkgs
    # so that packages are not evaluated up front (or some commands would take a *very* long time).
    # Somewhat deceptively, this is not called legacyPackages because the packages are old.
    legacyPackages."<system>"."<name>" = derivation;
    # These are consumables that overlay an attribute set, typically used for nixpkgs overlays (eww).
    overlays = {
      default = self: super: { };
      "<name>" = self: super: { };
    };
    # These are nixos modules, units that make up a nixos configuration.
    nixosModules = {
      default = {};
      "<name>" = {};
    };
    # These are nixos configurations.
    # `nixos-rebuild` will attempt to use one that matches the current system's hostname by default.
    nixosConfigurations."<hostname>" = {};
    # These are used by `nix develop` to enter a reproducible development environment.
    devShells."<system>" = {
      default = derivation;
      "<name>" = derivation;
    };
    # This is the formatter `nix fmt` will attempt to use to format all nix files.
    formatter."<system>" = derivation;
    # `nix flake check` builds these as a basic testing system.
    # The success condition is build success.
    checks."<system>"."<name>" = derivation;
  };
}
#+end_src

* Example

This flake reexposes the =hello= package from nixpkgs for x86_64-linux systems.

#+begin_src nix
{
  description = "A very basic flake";
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs";
  };
  outputs = { nixpkgs, ... }: {
    packages.x86_64-linux = rec {
      default = hello;
      hello = nixpkgs.legacyPackages.x86_64-linux.hello;
    };
  };
}
#+end_src

* Gotchas
+ =In a version controlled flake, a file is not found despite seemingly
  existing.= This usually occurs because the version control system is not
  tracking that file. A version controlled flake will only copy the tracked
  files to the [[id:5cfe20a7-9719-4d9a-804e-6e53f5cd45ba][Nix Store]]; thus, as far as [[id:969658ed-3fd5-488d-b9c5-24cbaf37b6ee][Nix]] is concerned, that file /is/
  missing.
+ =Submodules are not present.= By default, submodules are not copied to the [[id:5cfe20a7-9719-4d9a-804e-6e53f5cd45ba][Nix
  Store]]. This can be overridden by adding ~?submodules=1~ to the URL.
